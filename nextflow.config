/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/bacass Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                           = null

    // QC and trimming options
    save_trimmed_fail               = false
    save_merged                     = false

    // Contamination_screening
    kraken2db                       = ""
    single_end			    = ""

    // Assembly parameters
    assembler                       = 'unicycler'   // Allowed: ['unicycler', 'canu', 'miniasm', 'dragonflye']
    assembly_type                   = 'short'       // Allowed: ['short', 'long', 'hybrid'] (hybrid works only with Unicycler)
    unicycler_args                  = ""
    canu_mode                       = '-nanopore'   // Allowed: ['-pacbio', '-nanopore', '-pacbio-hifi']
    canu_args                       = ''            // Default no extra options, can be adjusted by the user
    dragonflye_args                 = ''

    // Assembly polishing
    polish_method                   = 'medaka'      // Allowed: ['medaka', 'nanopolish']

    // Skipping options
    skip_fastqc                     = false
    val_skip_fastqc		    = false
    skip_fastp                      = false
    skip_kraken2                    = false
    skip_pycoqc                     = false
    skip_polish                     = false
    skip_multiqc                    = false

    // MultiQC options
    multiqc_config                  = null
    multiqc_title                   = null
    multiqc_logo                    = null
    max_multiqc_email_size          = '25.MB'
    multiqc_methods_description     = null

    // Boilerplate options
    outdir                          = null
    publish_dir_mode                = 'copy'
    email                           = null
    email_on_fail                   = null
    plaintext_email                 = false
    monochrome_logs                 = false
    hook_url                        = null
    help                            = false
    validate_params                 = true
    schema_ignore_params            = 'modules,igenomes_base'
    version                         = false
    pipeline_info                   = "${params.outdir}/pipeline_info"
    

    // Config options
    config_profile_name             = null
    config_profile_description      = null
    custom_config_version           = 'master'
    custom_config_base              = "https://raw.githubusercontent.com/nf-core/configs"
    config_profile_contact          = null
    config_profile_url              = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                      = '128.GB'
    max_cpus                        = 16
    max_time                        = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams= false
    validationLenientMode           = false
    validationSchemaIgnoreParams    = 'genomes'
    validationShowHiddenParams      = false
    validate_params                 = true
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'


// Load nf-core custom profiles from different Institutions
// try {
//     includeConfig "${params.custom_config_base}/nfcore_custom.config"
// } catch (Exception e) {
//    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
//}

profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
     //   nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        channels               = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    docker {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        docker.runOptions      = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions      = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    podman {
        podman.enabled         = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    shifter {
        shifter.enabled        = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    charliecloud {
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        apptainer.autoMounts   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 4
        executor.memory        = 8.GB
    }
  //  test                    { includeConfig 'conf/test.config'                  }
   // test_dfast              { includeConfig 'conf/test_dfast.config'            }
   // test_hybrid             { includeConfig 'conf/test_hybrid.config'           }
   // test_hybrid_dragonflye  { includeConfig 'conf/test_hybrid_dragonflye.config'}
   // test_long               { includeConfig 'conf/test_long.config'             }
   // test_long_miniasm       { includeConfig 'conf/test_long_miniasm.config'     }
   // test_long_dragonflye    { includeConfig 'conf/test_long_dragonflye.config'  }
   // test_full               { includeConfig 'conf/test_full.config'             }
}




// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "$params.pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "$params.pipeline_info/execution_report_${trace_timestamp}.html"
}
dag {
    enabled = true
    file    = "$params.pipeline_info/pipeline_dag_${trace_timestamp}.html"
}
trace {
  enabled = true
  file = "${params.pipeline_info}/execution_trace_${trace_timestamp}.txt"
  overwrite = true
  fields =  "task_id,\
  hash,\
  process,\
  tag,\
  status,\
  exit,\
  start,\
  peak_rss,\
  cpus,\
  time,\
  disk,\
  memory,\
  duration,\
  realtime,\
  queue,\
  %cpu,\
  %mem,\
  rss,\
  vmem,\
  rchar,\
  wchar"

}

manifest {
  name = 'ayoraind/bacass'
  author = 'Ayorinde Afolayan'
  homePage = 'https://github.com/ayoraind/bacass'
  description = 'Pipeline for genome assembly of both short and long reads. Also does hybrid assembly (unicycler version and dragonflye version'
  mainScript = 'main.nf'
  version = '1.0dev'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
